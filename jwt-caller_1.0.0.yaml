swagger: '2.0'
info:
  title: jwt-caller
  x-ibm-name: jwt-caller
  version: 1.0.0
x-ibm-configuration:
  cors:
    enabled: true
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  assembly:
    execute:
      - set-variable:
          version: 2.0.0
          title: setVar for JWT-call
          actions:
            - set: message.headers.clientid
              value: xyz-clientid
              type: any
            - set: message.headers.clientsecret
              value: xyz-secret
              type: any
            - set: message.headers.aud-claim
              value: jwkEndPointTester
              type: any
      - invoke:
          title: invoke-JWT-gen
          version: 2.0.0
          verb: GET
          target-url: >-
            https://$(request.headers.host)/$(api.org.name)/$(api.catalog.name)/jwt/gen
          follow-redirects: false
          timeout: 60
          parameter-control:
            type: blocklist
            values: []
          header-control:
            type: blocklist
            values: []
          inject-proxy-headers: false
          backend-type: json
          cache-response: time-to-live
          cache-ttl: 10
          output: jwt-response
          stop-on-error:
            - ConnectionError
            - SOAPError
            - OperationError
      - gatewayscript:
          version: 2.0.0
          title: gatewayscript
          source: >+
            var apim = require('apim');

            console.log('****jwt-response var from invoke: ' +
            apim.getvariable('jwt-response.body'));


            var vJWTResponse = apim.getvariable('jwt-response.body').toString();

            console.log('****Type of vJWTResponse: ' + typeof vJWTResponse);


            apim.setvariable('message.headers.authorization', vJWTResponse);

            console.log('****Auth.header set for down stream call: ' +
            apim.getvariable('message.headers.authorization'));


            //Logging the JWT generate URL:

            var vJWTGenUrl = 'https://' +
            apim.getvariable('request.headers.host') + '/' +
            apim.getvariable('api.org.name') + '/' +
            apim.getvariable('api.catalog.name') + '/jwt/gen';

            console.log('****JWT-gen URL: ' + vJWTGenUrl);


            apim.setvariable('message.body', vJWTResponse);

      - invoke:
          version: 2.2.0
          title: invoke-backend
          backend-type: json
          header-control:
            type: blocklist
            values: []
          parameter-control:
            type: allowlist
            values: []
          http-version: HTTP/1.1
          timeout: 60
          verb: GET
          chunked-uploads: true
          persistent-connection: true
          cache-response: protocol
          cache-ttl: 900
          websocket-upgrade: false
          target-url: >-
            https://$(request.headers.host)/$(api.org.name)/$(api.catalog.name)/jwt/val
          inject-proxy-headers: true
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: 'false'
              execute: []
    catch: []
  properties: {}
basePath: /jwt-caller
paths:
  /:
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    put:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    post:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    delete:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    options:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    head:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    patch:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
schemes:
  - https
